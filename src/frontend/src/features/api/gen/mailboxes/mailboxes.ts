/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  Mailbox,
  MailboxLight,
  MailboxesMessageTemplatesAvailableListParams,
  MailboxesMessageTemplatesRenderRetrieve200,
  MailboxesSearchListParams,
  ReadOnlyMessageTemplate,
} from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ViewSet for Mailbox model.
 */
export type mailboxesListResponse200 = {
  data: Mailbox[];
  status: 200;
};

export type mailboxesListResponseComposite = mailboxesListResponse200;

export type mailboxesListResponse = mailboxesListResponseComposite & {
  headers: Headers;
};

export const getMailboxesListUrl = () => {
  return `/api/v1.0/mailboxes/`;
};

export const mailboxesList = async (
  options?: RequestInit,
): Promise<mailboxesListResponse> => {
  return fetchAPI<mailboxesListResponse>(getMailboxesListUrl(), {
    ...options,
    method: "GET",
  });
};

export const getMailboxesListQueryKey = () => {
  return [`/api/v1.0/mailboxes/`] as const;
};

export const getMailboxesListQueryOptions = <
  TData = Awaited<ReturnType<typeof mailboxesList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof mailboxesList>>, TError, TData>
  >;
  request?: SecondParameter<typeof fetchAPI>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMailboxesListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof mailboxesList>>> = ({
    signal,
  }) => mailboxesList({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof mailboxesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MailboxesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof mailboxesList>>
>;
export type MailboxesListQueryError = unknown;

export function useMailboxesList<
  TData = Awaited<ReturnType<typeof mailboxesList>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof mailboxesList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesList>>,
          TError,
          Awaited<ReturnType<typeof mailboxesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesList<
  TData = Awaited<ReturnType<typeof mailboxesList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof mailboxesList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesList>>,
          TError,
          Awaited<ReturnType<typeof mailboxesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesList<
  TData = Awaited<ReturnType<typeof mailboxesList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof mailboxesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMailboxesList<
  TData = Awaited<ReturnType<typeof mailboxesList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof mailboxesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMailboxesListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for retrieving and rendering message templates for a mailbox.
 */
export type mailboxesMessageTemplatesRetrieveResponse200 = {
  data: ReadOnlyMessageTemplate;
  status: 200;
};

export type mailboxesMessageTemplatesRetrieveResponseComposite =
  mailboxesMessageTemplatesRetrieveResponse200;

export type mailboxesMessageTemplatesRetrieveResponse =
  mailboxesMessageTemplatesRetrieveResponseComposite & {
    headers: Headers;
  };

export const getMailboxesMessageTemplatesRetrieveUrl = (
  mailboxId: string,
  id: string,
) => {
  return `/api/v1.0/mailboxes/${mailboxId}/message-templates/${id}/`;
};

export const mailboxesMessageTemplatesRetrieve = async (
  mailboxId: string,
  id: string,
  options?: RequestInit,
): Promise<mailboxesMessageTemplatesRetrieveResponse> => {
  return fetchAPI<mailboxesMessageTemplatesRetrieveResponse>(
    getMailboxesMessageTemplatesRetrieveUrl(mailboxId, id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMailboxesMessageTemplatesRetrieveQueryKey = (
  mailboxId: string,
  id: string,
) => {
  return [`/api/v1.0/mailboxes/${mailboxId}/message-templates/${id}/`] as const;
};

export const getMailboxesMessageTemplatesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
  TError = unknown,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMailboxesMessageTemplatesRetrieveQueryKey(mailboxId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>
  > = ({ signal }) =>
    mailboxesMessageTemplatesRetrieve(mailboxId, id, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(mailboxId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MailboxesMessageTemplatesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>
>;
export type MailboxesMessageTemplatesRetrieveQueryError = unknown;

export function useMailboxesMessageTemplatesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
  TError = unknown,
>(
  mailboxId: string,
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesMessageTemplatesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
  TError = unknown,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesMessageTemplatesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
  TError = unknown,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMailboxesMessageTemplatesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
  TError = unknown,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMailboxesMessageTemplatesRetrieveQueryOptions(
    mailboxId,
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Render a template with the provided context variables.
 */
export type mailboxesMessageTemplatesRenderRetrieveResponse200 = {
  data: MailboxesMessageTemplatesRenderRetrieve200;
  status: 200;
};

export type mailboxesMessageTemplatesRenderRetrieveResponse404 = {
  data: void;
  status: 404;
};

export type mailboxesMessageTemplatesRenderRetrieveResponseComposite =
  | mailboxesMessageTemplatesRenderRetrieveResponse200
  | mailboxesMessageTemplatesRenderRetrieveResponse404;

export type mailboxesMessageTemplatesRenderRetrieveResponse =
  mailboxesMessageTemplatesRenderRetrieveResponseComposite & {
    headers: Headers;
  };

export const getMailboxesMessageTemplatesRenderRetrieveUrl = (
  mailboxId: string,
  id: string,
) => {
  return `/api/v1.0/mailboxes/${mailboxId}/message-templates/${id}/render/`;
};

export const mailboxesMessageTemplatesRenderRetrieve = async (
  mailboxId: string,
  id: string,
  options?: RequestInit,
): Promise<mailboxesMessageTemplatesRenderRetrieveResponse> => {
  return fetchAPI<mailboxesMessageTemplatesRenderRetrieveResponse>(
    getMailboxesMessageTemplatesRenderRetrieveUrl(mailboxId, id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMailboxesMessageTemplatesRenderRetrieveQueryKey = (
  mailboxId: string,
  id: string,
) => {
  return [
    `/api/v1.0/mailboxes/${mailboxId}/message-templates/${id}/render/`,
  ] as const;
};

export const getMailboxesMessageTemplatesRenderRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
  TError = void,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMailboxesMessageTemplatesRenderRetrieveQueryKey(mailboxId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>
  > = ({ signal }) =>
    mailboxesMessageTemplatesRenderRetrieve(mailboxId, id, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(mailboxId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MailboxesMessageTemplatesRenderRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>
>;
export type MailboxesMessageTemplatesRenderRetrieveQueryError = void;

export function useMailboxesMessageTemplatesRenderRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
  TError = void,
>(
  mailboxId: string,
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
          TError,
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesMessageTemplatesRenderRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
  TError = void,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
          TError,
          Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesMessageTemplatesRenderRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
  TError = void,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMailboxesMessageTemplatesRenderRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
  TError = void,
>(
  mailboxId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesRenderRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMailboxesMessageTemplatesRenderRetrieveQueryOptions(
    mailboxId,
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List message templates.
 */
export type mailboxesMessageTemplatesAvailableListResponse200 = {
  data: ReadOnlyMessageTemplate[];
  status: 200;
};

export type mailboxesMessageTemplatesAvailableListResponseComposite =
  mailboxesMessageTemplatesAvailableListResponse200;

export type mailboxesMessageTemplatesAvailableListResponse =
  mailboxesMessageTemplatesAvailableListResponseComposite & {
    headers: Headers;
  };

export const getMailboxesMessageTemplatesAvailableListUrl = (
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/mailboxes/${mailboxId}/message-templates/available/?${stringifiedParams}`
    : `/api/v1.0/mailboxes/${mailboxId}/message-templates/available/`;
};

export const mailboxesMessageTemplatesAvailableList = async (
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
  options?: RequestInit,
): Promise<mailboxesMessageTemplatesAvailableListResponse> => {
  return fetchAPI<mailboxesMessageTemplatesAvailableListResponse>(
    getMailboxesMessageTemplatesAvailableListUrl(mailboxId, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMailboxesMessageTemplatesAvailableListQueryKey = (
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
) => {
  return [
    `/api/v1.0/mailboxes/${mailboxId}/message-templates/available/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getMailboxesMessageTemplatesAvailableListQueryOptions = <
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
  TError = unknown,
>(
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMailboxesMessageTemplatesAvailableListQueryKey(mailboxId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>
  > = ({ signal }) =>
    mailboxesMessageTemplatesAvailableList(mailboxId, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!mailboxId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MailboxesMessageTemplatesAvailableListQueryResult = NonNullable<
  Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>
>;
export type MailboxesMessageTemplatesAvailableListQueryError = unknown;

export function useMailboxesMessageTemplatesAvailableList<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
  TError = unknown,
>(
  mailboxId: string,
  params: undefined | MailboxesMessageTemplatesAvailableListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
          TError,
          Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesMessageTemplatesAvailableList<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
  TError = unknown,
>(
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
          TError,
          Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesMessageTemplatesAvailableList<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
  TError = unknown,
>(
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMailboxesMessageTemplatesAvailableList<
  TData = Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
  TError = unknown,
>(
  mailboxId: string,
  params?: MailboxesMessageTemplatesAvailableListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesMessageTemplatesAvailableList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMailboxesMessageTemplatesAvailableListQueryOptions(
    mailboxId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for Mailbox model.
 */
export type mailboxesRetrieveResponse200 = {
  data: Mailbox;
  status: 200;
};

export type mailboxesRetrieveResponseComposite = mailboxesRetrieveResponse200;

export type mailboxesRetrieveResponse = mailboxesRetrieveResponseComposite & {
  headers: Headers;
};

export const getMailboxesRetrieveUrl = (id: string) => {
  return `/api/v1.0/mailboxes/${id}/`;
};

export const mailboxesRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<mailboxesRetrieveResponse> => {
  return fetchAPI<mailboxesRetrieveResponse>(getMailboxesRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getMailboxesRetrieveQueryKey = (id: string) => {
  return [`/api/v1.0/mailboxes/${id}/`] as const;
};

export const getMailboxesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof mailboxesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMailboxesRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof mailboxesRetrieve>>
  > = ({ signal }) => mailboxesRetrieve(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof mailboxesRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MailboxesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof mailboxesRetrieve>>
>;
export type MailboxesRetrieveQueryError = unknown;

export function useMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof mailboxesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof mailboxesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof mailboxesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMailboxesRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Search mailboxes by domain, local part and contact name.

Query parameters:
- q: Optional search query for local part and contact name
 */
export type mailboxesSearchListResponse200 = {
  data: MailboxLight[];
  status: 200;
};

export type mailboxesSearchListResponseComposite =
  mailboxesSearchListResponse200;

export type mailboxesSearchListResponse =
  mailboxesSearchListResponseComposite & {
    headers: Headers;
  };

export const getMailboxesSearchListUrl = (
  id: string,
  params?: MailboxesSearchListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/mailboxes/${id}/search/?${stringifiedParams}`
    : `/api/v1.0/mailboxes/${id}/search/`;
};

export const mailboxesSearchList = async (
  id: string,
  params?: MailboxesSearchListParams,
  options?: RequestInit,
): Promise<mailboxesSearchListResponse> => {
  return fetchAPI<mailboxesSearchListResponse>(
    getMailboxesSearchListUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMailboxesSearchListQueryKey = (
  id: string,
  params?: MailboxesSearchListParams,
) => {
  return [
    `/api/v1.0/mailboxes/${id}/search/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getMailboxesSearchListQueryOptions = <
  TData = Awaited<ReturnType<typeof mailboxesSearchList>>,
  TError = unknown,
>(
  id: string,
  params?: MailboxesSearchListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesSearchList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMailboxesSearchListQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof mailboxesSearchList>>
  > = ({ signal }) =>
    mailboxesSearchList(id, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof mailboxesSearchList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MailboxesSearchListQueryResult = NonNullable<
  Awaited<ReturnType<typeof mailboxesSearchList>>
>;
export type MailboxesSearchListQueryError = unknown;

export function useMailboxesSearchList<
  TData = Awaited<ReturnType<typeof mailboxesSearchList>>,
  TError = unknown,
>(
  id: string,
  params: undefined | MailboxesSearchListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesSearchList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesSearchList>>,
          TError,
          Awaited<ReturnType<typeof mailboxesSearchList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesSearchList<
  TData = Awaited<ReturnType<typeof mailboxesSearchList>>,
  TError = unknown,
>(
  id: string,
  params?: MailboxesSearchListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesSearchList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mailboxesSearchList>>,
          TError,
          Awaited<ReturnType<typeof mailboxesSearchList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMailboxesSearchList<
  TData = Awaited<ReturnType<typeof mailboxesSearchList>>,
  TError = unknown,
>(
  id: string,
  params?: MailboxesSearchListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesSearchList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMailboxesSearchList<
  TData = Awaited<ReturnType<typeof mailboxesSearchList>>,
  TError = unknown,
>(
  id: string,
  params?: MailboxesSearchListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof mailboxesSearchList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMailboxesSearchListQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
