{
    "openapi": "3.0.3",
    "info": {
        "title": "messages API",
        "version": "1.0.0 (v1.0)",
        "description": "This is the messages API schema."
    },
    "paths": {
        "/api/v1.0/blob/{id}/download/": {
            "get": {
                "operationId": "blob_download_retrieve",
                "description": "Download binary data for the specified blob ID.\n\nThis endpoint returns the raw binary content of a blob. Access is controlled\nby checking if the user has access to any mailbox that owns this blob.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "blob"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/blob/upload/{mailbox_id}/": {
            "post": {
                "operationId": "blob_upload_create",
                "description": "Upload binary data and create a Blob record.\n        This endpoint accepts multipart/form-data containing a file and returns a\n        blob ID and other metadata. The blob is associated with the specified mailbox.\n        ",
                "parameters": [
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the mailbox to associate the blob with",
                        "required": true
                    }
                ],
                "tags": [
                    "blob"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The file to upload"
                                    }
                                },
                                "required": [
                                    "file"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "blobId": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "type": {
                                            "type": "string"
                                        },
                                        "size": {
                                            "type": "integer"
                                        },
                                        "sha256": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "blobId",
                                        "type",
                                        "size",
                                        "sha256"
                                    ]
                                }
                            }
                        },
                        "description": "Blob created successfully"
                    },
                    "400": {
                        "description": "Bad request - No file provided"
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission to upload to this mailbox"
                    },
                    "404": {
                        "description": "Mailbox not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1.0/config/": {
            "get": {
                "operationId": "config_retrieve",
                "description": "Return a dictionary of public settings for the frontend to consume.",
                "tags": [
                    "config"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ENVIRONMENT": {
                                            "type": "string",
                                            "readOnly": true
                                        },
                                        "LANGUAGES": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "readOnly": true
                                        },
                                        "LANGUAGE_CODE": {
                                            "type": "string",
                                            "readOnly": true
                                        },
                                        "AI_ENABLED": {
                                            "type": "boolean",
                                            "readOnly": true
                                        },
                                        "AI_FEATURE_SUMMARY_ENABLED": {
                                            "type": "boolean",
                                            "readOnly": true
                                        },
                                        "AI_FEATURE_AUTOLABELS_ENABLED": {
                                            "type": "boolean",
                                            "readOnly": true
                                        },
                                        "DRIVE": {
                                            "type": "object",
                                            "description": "The URLs of the Drive external service.",
                                            "properties": {
                                                "sdk_url": {
                                                    "type": "string",
                                                    "readOnly": true
                                                },
                                                "api_url": {
                                                    "type": "string",
                                                    "readOnly": true
                                                }
                                            },
                                            "readOnly": true,
                                            "required": [
                                                "sdk_url",
                                                "api_url"
                                            ]
                                        },
                                        "SCHEMA_CUSTOM_ATTRIBUTES_USER": {
                                            "type": "object",
                                            "readOnly": true
                                        },
                                        "SCHEMA_CUSTOM_ATTRIBUTES_MAILDOMAIN": {
                                            "type": "object",
                                            "readOnly": true
                                        }
                                    },
                                    "required": [
                                        "ENVIRONMENT",
                                        "LANGUAGES",
                                        "LANGUAGE_CODE",
                                        "AI_ENABLED",
                                        "AI_FEATURE_SUMMARY_ENABLED",
                                        "AI_FEATURE_AUTOLABELS_ENABLED",
                                        "SCHEMA_CUSTOM_ATTRIBUTES_USER",
                                        "SCHEMA_CUSTOM_ATTRIBUTES_MAILDOMAIN"
                                    ]
                                }
                            }
                        },
                        "description": "A dictionary of public configuration settings."
                    }
                }
            }
        },
        "/api/v1.0/contacts/": {
            "get": {
                "operationId": "contacts_list",
                "description": "List contacts with optional filtering by mailbox and search query.\n\nQuery parameters:\n- mailbox_id: Optional UUID to filter contacts by mailbox\n- q: Optional search query for name or email (case insensitive)",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter contacts by mailbox ID."
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search contacts by name or email (case insensitive)."
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Contact"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/contacts/{id}/": {
            "get": {
                "operationId": "contacts_retrieve",
                "description": "ViewSet for Contact model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contact"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/draft/": {
            "post": {
                "operationId": "draft_create",
                "description": "\n    Create or update a draft message.\n    \n    This endpoint allows you to:\n    - Create a new draft message in a new thread\n    - Create a draft reply to an existing message in an existing thread\n    - Update an existing draft message\n    \n    For creating a new draft:\n    - Do not include messageId\n    - Include parentId if replying to an existing message\n    \n    For updating an existing draft:\n    - Include messageId of the draft to update\n    - Only the fields that are provided will be updated\n    \n    At least one of draftBody must be provided.\n    \n    To add attachments, upload them first using the /api/v1.0/blob/upload/{mailbox_id}/ endpoint\n    and include the returned blobIds in the attachmentIds field.\n    ",
                "tags": [
                    "messages"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            },
                            "examples": {
                                "NewDraftMessage": {
                                    "value": {
                                        "subject": "Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ],
                                        "cc": [
                                            "cc@example.com"
                                        ],
                                        "bcc": [
                                            "bcc@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "summary": "New Draft Message"
                                },
                                "DraftReply": {
                                    "value": {
                                        "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Re: Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ]
                                    },
                                    "summary": "Draft Reply"
                                },
                                "UpdateDraftWithAttachments": {
                                    "value": {
                                        "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Updated subject",
                                        "draftBody": "{\"arbitrary\": \"new json content\"}",
                                        "to": [
                                            "new-recipient@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                        "attachments": [
                                            {
                                                "partId": "att-1",
                                                "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                "name": "document.pdf"
                                            }
                                        ]
                                    },
                                    "summary": "Update Draft with Attachments"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "draft_update",
                "description": "\n    Create or update a draft message.\n    \n    This endpoint allows you to:\n    - Create a new draft message in a new thread\n    - Create a draft reply to an existing message in an existing thread\n    - Update an existing draft message\n    \n    For creating a new draft:\n    - Do not include messageId\n    - Include parentId if replying to an existing message\n    \n    For updating an existing draft:\n    - Include messageId of the draft to update\n    - Only the fields that are provided will be updated\n    \n    At least one of draftBody must be provided.\n    \n    To add attachments, upload them first using the /api/v1.0/blob/upload/{mailbox_id}/ endpoint\n    and include the returned blobIds in the attachmentIds field.\n    ",
                "tags": [
                    "messages"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            },
                            "examples": {
                                "NewDraftMessage": {
                                    "value": {
                                        "subject": "Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ],
                                        "cc": [
                                            "cc@example.com"
                                        ],
                                        "bcc": [
                                            "bcc@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "summary": "New Draft Message"
                                },
                                "DraftReply": {
                                    "value": {
                                        "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Re: Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ]
                                    },
                                    "summary": "Draft Reply"
                                },
                                "UpdateDraftWithAttachments": {
                                    "value": {
                                        "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Updated subject",
                                        "draftBody": "{\"arbitrary\": \"new json content\"}",
                                        "to": [
                                            "new-recipient@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                        "attachments": [
                                            {
                                                "partId": "att-1",
                                                "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                "name": "document.pdf"
                                            }
                                        ]
                                    },
                                    "summary": "Update Draft with Attachments"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/draft/{message_id}/": {
            "post": {
                "operationId": "draft_create_2",
                "description": "\n    Create or update a draft message.\n    \n    This endpoint allows you to:\n    - Create a new draft message in a new thread\n    - Create a draft reply to an existing message in an existing thread\n    - Update an existing draft message\n    \n    For creating a new draft:\n    - Do not include messageId\n    - Include parentId if replying to an existing message\n    \n    For updating an existing draft:\n    - Include messageId of the draft to update\n    - Only the fields that are provided will be updated\n    \n    At least one of draftBody must be provided.\n    \n    To add attachments, upload them first using the /api/v1.0/blob/upload/{mailbox_id}/ endpoint\n    and include the returned blobIds in the attachmentIds field.\n    ",
                "parameters": [
                    {
                        "in": "path",
                        "name": "message_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "messages"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            },
                            "examples": {
                                "NewDraftMessage": {
                                    "value": {
                                        "subject": "Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ],
                                        "cc": [
                                            "cc@example.com"
                                        ],
                                        "bcc": [
                                            "bcc@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "summary": "New Draft Message"
                                },
                                "DraftReply": {
                                    "value": {
                                        "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Re: Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ]
                                    },
                                    "summary": "Draft Reply"
                                },
                                "UpdateDraftWithAttachments": {
                                    "value": {
                                        "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Updated subject",
                                        "draftBody": "{\"arbitrary\": \"new json content\"}",
                                        "to": [
                                            "new-recipient@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                        "attachments": [
                                            {
                                                "partId": "att-1",
                                                "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                "name": "document.pdf"
                                            }
                                        ]
                                    },
                                    "summary": "Update Draft with Attachments"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "draft_update_2",
                "description": "\n    Create or update a draft message.\n    \n    This endpoint allows you to:\n    - Create a new draft message in a new thread\n    - Create a draft reply to an existing message in an existing thread\n    - Update an existing draft message\n    \n    For creating a new draft:\n    - Do not include messageId\n    - Include parentId if replying to an existing message\n    \n    For updating an existing draft:\n    - Include messageId of the draft to update\n    - Only the fields that are provided will be updated\n    \n    At least one of draftBody must be provided.\n    \n    To add attachments, upload them first using the /api/v1.0/blob/upload/{mailbox_id}/ endpoint\n    and include the returned blobIds in the attachmentIds field.\n    ",
                "parameters": [
                    {
                        "in": "path",
                        "name": "message_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "messages"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            },
                            "examples": {
                                "NewDraftMessage": {
                                    "value": {
                                        "subject": "Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ],
                                        "cc": [
                                            "cc@example.com"
                                        ],
                                        "bcc": [
                                            "bcc@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "summary": "New Draft Message"
                                },
                                "DraftReply": {
                                    "value": {
                                        "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Re: Hello",
                                        "draftBody": "{\"arbitrary\": \"json content\"}",
                                        "to": [
                                            "recipient@example.com"
                                        ]
                                    },
                                    "summary": "Draft Reply"
                                },
                                "UpdateDraftWithAttachments": {
                                    "value": {
                                        "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                        "subject": "Updated subject",
                                        "draftBody": "{\"arbitrary\": \"new json content\"}",
                                        "to": [
                                            "new-recipient@example.com"
                                        ],
                                        "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                        "attachments": [
                                            {
                                                "partId": "att-1",
                                                "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                "name": "document.pdf"
                                            }
                                        ]
                                    },
                                    "summary": "Update Draft with Attachments"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftMessageRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                },
                                "examples": {
                                    "NewDraftMessage": {
                                        "value": {
                                            "subject": "Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ],
                                            "cc": [
                                                "cc@example.com"
                                            ],
                                            "bcc": [
                                                "bcc@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "summary": "New Draft Message"
                                    },
                                    "DraftReply": {
                                        "value": {
                                            "parentId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Re: Hello",
                                            "draftBody": "{\"arbitrary\": \"json content\"}",
                                            "to": [
                                                "recipient@example.com"
                                            ]
                                        },
                                        "summary": "Draft Reply"
                                    },
                                    "UpdateDraftWithAttachments": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "subject": "Updated subject",
                                            "draftBody": "{\"arbitrary\": \"new json content\"}",
                                            "to": [
                                                "new-recipient@example.com"
                                            ],
                                            "signatureId": "123e4567-e89b-12d3-a456-426614174000",
                                            "attachments": [
                                                {
                                                    "partId": "att-1",
                                                    "blobId": "123e4567-e89b-12d3-a456-426614174001",
                                                    "name": "document.pdf"
                                                }
                                            ]
                                        },
                                        "summary": "Update Draft with Attachments"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/flag/": {
            "post": {
                "operationId": "flag_create",
                "description": "Change a specific flag (unread, starred, trashed) for multiple messages or all messages within multiple threads. Uses request body.",
                "tags": [
                    "flags"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeFlagRequestRequest"
                            },
                            "examples": {
                                "MarkMessagesAsRead": {
                                    "value": {
                                        "flag": "unread",
                                        "value": false,
                                        "message_ids": [
                                            "123e4567-e89b-12d3-a456-426614174001",
                                            "123e4567-e89b-12d3-a456-426614174002"
                                        ]
                                    },
                                    "summary": "Mark messages as read"
                                },
                                "TrashThreads": {
                                    "value": {
                                        "flag": "trashed",
                                        "value": true,
                                        "thread_ids": [
                                            "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                                            "b2c3d4e5-f6a7-8901-2345-67890abcdef0"
                                        ]
                                    },
                                    "summary": "Trash threads"
                                },
                                "StarMessagesAndThreads": {
                                    "value": {
                                        "flag": "starred",
                                        "value": true,
                                        "message_ids": [
                                            "123e4567-e89b-12d3-a456-426614174005"
                                        ],
                                        "thread_ids": [
                                            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                                        ]
                                    },
                                    "summary": "Star messages and threads"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeFlagRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                },
                                "examples": {
                                    "MarkMessagesAsRead": {
                                        "value": {
                                            "flag": "unread",
                                            "value": false,
                                            "message_ids": [
                                                "123e4567-e89b-12d3-a456-426614174001",
                                                "123e4567-e89b-12d3-a456-426614174002"
                                            ]
                                        },
                                        "summary": "Mark messages as read"
                                    },
                                    "TrashThreads": {
                                        "value": {
                                            "flag": "trashed",
                                            "value": true,
                                            "thread_ids": [
                                                "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                                                "b2c3d4e5-f6a7-8901-2345-67890abcdef0"
                                            ]
                                        },
                                        "summary": "Trash threads"
                                    },
                                    "StarMessagesAndThreads": {
                                        "value": {
                                            "flag": "starred",
                                            "value": true,
                                            "message_ids": [
                                                "123e4567-e89b-12d3-a456-426614174005"
                                            ],
                                            "thread_ids": [
                                                "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                                            ]
                                        },
                                        "summary": "Star messages and threads"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/import/file/": {
            "post": {
                "operationId": "import_file_create",
                "description": "\n        Import messages by uploading an EML or MBOX file.\n        \n        The import is processed asynchronously and returns a task ID for tracking.\n        The file must be a valid EML or MBOX format. The recipient mailbox must exist\n        and the user must have access to it.\n        ",
                "tags": [
                    "import"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportFileRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportFileRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportFileRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "task_id": {
                                            "type": "string",
                                            "description": "Task ID for tracking the import"
                                        },
                                        "type": {
                                            "type": "string",
                                            "description": "Type of import (eml or mbox)"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Import started. Returns Celery task ID for tracking."
                    },
                    "400": {
                        "description": "Invalid input data or file format"
                    },
                    "403": {
                        "description": "User does not have access to the specified mailbox"
                    },
                    "404": {
                        "description": "Specified mailbox not found"
                    }
                }
            }
        },
        "/api/v1.0/import/imap/": {
            "post": {
                "operationId": "import_imap_create",
                "description": "\n        Import messages from an IMAP server.\n        \n        This endpoint initiates an asynchronous import process from an IMAP server.\n        The import is processed in the background and returns a task ID for tracking.\n        \n        Required parameters:\n        - imap_server: Hostname of the IMAP server\n        - imap_port: Port number for the IMAP server\n        - username: IMAP account username\n        - password: IMAP account password\n        - recipient: ID of the mailbox to import messages into\n        \n        Optional parameters:\n        - use_ssl: Whether to use SSL for the connection (default: true)\n        ",
                "tags": [
                    "import"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportIMAPRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportIMAPRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportIMAPRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "task_id": {
                                            "type": "string",
                                            "description": "Task ID for tracking the import"
                                        },
                                        "type": {
                                            "type": "string",
                                            "description": "Type of import (imap)"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "IMAP import started. Returns Celery task ID for tracking the import progress."
                    },
                    "400": {
                        "description": "Invalid input data or IMAP connection parameters"
                    },
                    "403": {
                        "description": "User does not have access to the specified mailbox or IMAP credentials are invalid"
                    },
                    "404": {
                        "description": "Specified mailbox not found"
                    }
                }
            }
        },
        "/api/v1.0/labels/": {
            "get": {
                "operationId": "labels_list",
                "description": "\n        List all labels accessible to the user in a hierarchical structure.\n\n        The response returns labels in a tree structure where:\n        - Labels are ordered alphabetically by name\n        - Each label includes its children (sub-labels)\n        - The hierarchy is determined by the label's name (e.g., \"Inbox/Important\" is a child of \"Inbox\")\n\n        You can filter labels by mailbox using the mailbox_id query parameter.\n        ",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "\n                Filter labels by mailbox ID. If not provided, returns labels from all accessible mailboxes.\n                "
                    }
                ],
                "tags": [
                    "labels"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TreeLabel"
                                    }
                                }
                            }
                        },
                        "description": "List of labels in hierarchical structure"
                    }
                }
            },
            "post": {
                "operationId": "labels_create",
                "description": "View and manage labels",
                "tags": [
                    "labels"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TreeLabel"
                                    }
                                }
                            }
                        },
                        "description": "Created labels in hierarchical structure"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "Validation error"
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "You need EDITOR, SENDER or ADMIN role to manage labels"
                                }
                            }
                        },
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1.0/labels/{id}/": {
            "put": {
                "operationId": "labels_update",
                "description": "View and manage labels",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "labels"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        },
                        "description": "Label updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "Validation error"
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "You need EDITOR, SENDER or ADMIN role to manage labels"
                                }
                            }
                        },
                        "description": "Permission denied"
                    }
                }
            },
            "patch": {
                "operationId": "labels_partial_update",
                "description": "View and manage labels",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "labels"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLabelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLabelRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "labels_destroy",
                "description": "View and manage labels",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "labels"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Label deleted successfully"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "You need EDITOR, SENDER or ADMIN role to manage labels"
                                }
                            }
                        },
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            }
        },
        "/api/v1.0/labels/{id}/add-threads/": {
            "post": {
                "operationId": "labels_add_threads_create",
                "description": "View and manage labels",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "labels"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "thread_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "description": "List of thread IDs to add to this label"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        },
                        "description": "Threads added to label successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "Validation error"
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "You need EDITOR, SENDER or ADMIN role to manage labels"
                                }
                            }
                        },
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1.0/labels/{id}/remove-threads/": {
            "post": {
                "operationId": "labels_remove_threads_create",
                "description": "View and manage labels",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "labels"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "thread_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "description": "List of thread IDs to remove from this label"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        },
                        "description": "Threads removed from label successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "Validation error"
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "You need EDITOR, SENDER or ADMIN role to manage labels"
                                }
                            }
                        },
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/": {
            "get": {
                "operationId": "mailboxes_list",
                "description": "ViewSet for Mailbox model.",
                "tags": [
                    "mailboxes"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mailbox"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{mailbox_id}/accesses/": {
            "get": {
                "operationId": "mailboxes_accesses_list",
                "description": "ViewSet for managing MailboxAccess records for a specific Mailbox.\nThe mailbox_id is expected as part of the URL.\nAccess is allowed if the user has MailboxAccess (ADMIN role)\nto the target Mailbox itself, or is a domain admin of the mailbox's domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "mailbox-accesses"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMailboxAccessReadList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "mailboxes_accesses_create",
                "description": "ViewSet for managing MailboxAccess records for a specific Mailbox.\nThe mailbox_id is expected as part of the URL.\nAccess is allowed if the user has MailboxAccess (ADMIN role)\nto the target Mailbox itself, or is a domain admin of the mailbox's domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailbox-accesses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MailboxAccessWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MailboxAccessWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAccessWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{mailbox_id}/accesses/{id}/": {
            "get": {
                "operationId": "mailboxes_accesses_retrieve",
                "description": "ViewSet for managing MailboxAccess records for a specific Mailbox.\nThe mailbox_id is expected as part of the URL.\nAccess is allowed if the user has MailboxAccess (ADMIN role)\nto the target Mailbox itself, or is a domain admin of the mailbox's domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailbox-accesses"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAccessRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "mailboxes_accesses_update",
                "description": "ViewSet for managing MailboxAccess records for a specific Mailbox.\nThe mailbox_id is expected as part of the URL.\nAccess is allowed if the user has MailboxAccess (ADMIN role)\nto the target Mailbox itself, or is a domain admin of the mailbox's domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailbox-accesses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MailboxAccessWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MailboxAccessWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAccessWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "mailboxes_accesses_partial_update",
                "description": "ViewSet for managing MailboxAccess records for a specific Mailbox.\nThe mailbox_id is expected as part of the URL.\nAccess is allowed if the user has MailboxAccess (ADMIN role)\nto the target Mailbox itself, or is a domain admin of the mailbox's domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailbox-accesses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMailboxAccessWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMailboxAccessWriteRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAccessWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "mailboxes_accesses_destroy",
                "description": "ViewSet for managing MailboxAccess records for a specific Mailbox.\nThe mailbox_id is expected as part of the URL.\nAccess is allowed if the user has MailboxAccess (ADMIN role)\nto the target Mailbox itself, or is a domain admin of the mailbox's domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailbox-accesses"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{mailbox_id}/message-templates/{id}/": {
            "get": {
                "operationId": "mailboxes_message_templates_retrieve",
                "description": "ViewSet for retrieving and rendering message templates for a mailbox.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailboxes"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadOnlyMessageTemplate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{mailbox_id}/message-templates/{id}/render/": {
            "get": {
                "operationId": "mailboxes_message_templates_render_retrieve",
                "description": "Render a template with the provided context variables.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailboxes"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "html_body": {
                                            "type": "string"
                                        },
                                        "text_body": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Template rendered with provided context"
                    },
                    "404": {
                        "description": "Template not found"
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{mailbox_id}/message-templates/available/": {
            "get": {
                "operationId": "mailboxes_message_templates_available_list",
                "description": "List message templates.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new_message",
                                "reply",
                                "signature"
                            ]
                        }
                    }
                ],
                "tags": [
                    "mailboxes"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ReadOnlyMessageTemplate"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{id}/": {
            "get": {
                "operationId": "mailboxes_retrieve",
                "description": "ViewSet for Mailbox model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "mailboxes"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mailbox"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/mailboxes/{id}/search/": {
            "get": {
                "operationId": "mailboxes_search_list",
                "description": "Search mailboxes by domain, local part and contact name.\n\nQuery parameters:\n- q: Optional search query for local part and contact name",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search mailboxes by domain, local part and contact name."
                    }
                ],
                "tags": [
                    "mailboxes"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MailboxLight"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/": {
            "get": {
                "operationId": "maildomains_list",
                "description": "ViewSet for listing MailDomains the user administers.\nProvides a top-level entry for mail domain administration.\nEndpoint: /maildomains/<maildomain_pk>/",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMailDomainAdminList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "maildomains_create",
                "description": "ViewSet for listing MailDomains the user administers.\nProvides a top-level entry for mail domain administration.\nEndpoint: /maildomains/<maildomain_pk>/",
                "tags": [
                    "maildomains"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MailDomainAdminWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MailDomainAdminWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailDomainAdminWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/": {
            "get": {
                "operationId": "maildomains_retrieve",
                "description": "ViewSet for listing MailDomains the user administers.\nProvides a top-level entry for mail domain administration.\nEndpoint: /maildomains/<maildomain_pk>/",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailDomainAdmin"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/accesses/": {
            "get": {
                "operationId": "maildomains_accesses_list",
                "description": "ViewSet for managing MaildomainAccess records for a specific Maildomain.\nAccess is allowed if the user is maildomain admin or a super user.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomain-accesses"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MaildomainAccessRead"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "maildomains_accesses_create",
                "description": "ViewSet for managing MaildomainAccess records for a specific Maildomain.\nAccess is allowed if the user is maildomain admin or a super user.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomain-accesses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MaildomainAccessWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MaildomainAccessWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaildomainAccessWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/accesses/{id}/": {
            "get": {
                "operationId": "maildomains_accesses_retrieve",
                "description": "ViewSet for managing MaildomainAccess records for a specific Maildomain.\nAccess is allowed if the user is maildomain admin or a super user.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomain-accesses"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaildomainAccessRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "maildomains_accesses_destroy",
                "description": "ViewSet for managing MaildomainAccess records for a specific Maildomain.\nAccess is allowed if the user is maildomain admin or a super user.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomain-accesses"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/check-dns/": {
            "post": {
                "operationId": "maildomains_check_dns_create",
                "description": "Check DNS records for a specific mail domain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DNSCheckResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/mailboxes/": {
            "get": {
                "operationId": "maildomains_mailboxes_list",
                "description": "ViewSet for managing Mailboxes within a specific MailDomain.\nNested under /maildomains/{maildomain_pk}/mailboxes/\nPermissions are checked by IsMailDomainAdmin for the maildomain_pk.\n\nThis viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).\nThat other one is for listing the mailboxes a user has access to in regular app use.\nThis one is for managing mailboxes within a specific maildomain in the admin interface.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMailboxAdminList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "maildomains_mailboxes_create",
                "description": "Create new mailbox in a specific maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MailboxAdminCreatePayloadRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MailboxAdminCreatePayloadRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAdminCreate"
                                }
                            }
                        },
                        "description": "The new mailbox with one extra field `one_time_password` if identity provider is keycloak."
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/mailboxes/{id}/": {
            "get": {
                "operationId": "maildomains_mailboxes_retrieve",
                "description": "ViewSet for managing Mailboxes within a specific MailDomain.\nNested under /maildomains/{maildomain_pk}/mailboxes/\nPermissions are checked by IsMailDomainAdmin for the maildomain_pk.\n\nThis viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).\nThat other one is for listing the mailboxes a user has access to in regular app use.\nThis one is for managing mailboxes within a specific maildomain in the admin interface.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAdmin"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "maildomains_mailboxes_partial_update",
                "description": "Partially update a mailbox in a specific maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMailboxAdminPartialUpdatePayloadRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMailboxAdminPartialUpdatePayloadRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxAdmin"
                                }
                            }
                        },
                        "description": "The updated mailbox."
                    }
                }
            },
            "delete": {
                "operationId": "maildomains_mailboxes_destroy",
                "description": "ViewSet for managing Mailboxes within a specific MailDomain.\nNested under /maildomains/{maildomain_pk}/mailboxes/\nPermissions are checked by IsMailDomainAdmin for the maildomain_pk.\n\nThis viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).\nThat other one is for listing the mailboxes a user has access to in regular app use.\nThis one is for managing mailboxes within a specific maildomain in the admin interface.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/mailboxes/{id}/reset-password/": {
            "patch": {
                "operationId": "maildomains_mailboxes_reset_password",
                "description": "Reset the Keycloak password for a specific mailbox.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetPasswordResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetPasswordError"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetPasswordNotFound"
                                }
                            }
                        },
                        "description": ""
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetPasswordInternalServerError"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/message-templates/": {
            "get": {
                "operationId": "maildomains_message_templates_list",
                "description": "List message templates for a maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new_message",
                                "reply",
                                "signature"
                            ]
                        }
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageTemplate"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "maildomains_message_templates_create",
                "description": "ViewSet for managing message templates for a maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/maildomains/{maildomain_pk}/message-templates/{id}/": {
            "get": {
                "operationId": "maildomains_message_templates_retrieve",
                "description": "ViewSet for managing message templates for a maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "maildomains_message_templates_update",
                "description": "ViewSet for managing message templates for a maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "maildomains_message_templates_partial_update",
                "description": "ViewSet for managing message templates for a maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMessageTemplateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMessageTemplateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "maildomains_message_templates_destroy",
                "description": "ViewSet for managing message templates for a maildomain.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "maildomains"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/messages/": {
            "get": {
                "operationId": "messages_list",
                "description": "ViewSet for Message model.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "messages"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMessageList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/messages/{id}/": {
            "get": {
                "operationId": "messages_retrieve",
                "description": "ViewSet for Message model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "messages"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "messages_destroy",
                "description": "Delete a message. Object permission checked by IsAllowedToAccess.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "messages"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/messages/{id}/eml/": {
            "get": {
                "operationId": "messages_eml_retrieve",
                "description": "Return the EML file for a message.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "messages"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/placeholders/": {
            "get": {
                "operationId": "placeholders_retrieve",
                "description": "Get the structure of all available fields with their labels",
                "summary": "Get field structure",
                "tags": [
                    "placeholders"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Field slugs mapped to their verbose labels",
                                    "additionalProperties": {
                                        "type": "string",
                                        "description": "Verbose label for the field"
                                    },
                                    "example": {
                                        "name": "Name",
                                        "job_title": "Job title",
                                        "is_elected": "Is elected"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/send/": {
            "post": {
                "operationId": "send_create",
                "description": "\n    Send a previously created draft message.\n\n    This endpoint finalizes and sends a message previously saved as a draft.\n    The message content (subject, body, recipients) should be set when creating/updating the draft.\n    Returns a task ID that can be used to track the sending status.\n    ",
                "tags": [
                    "messages"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendMessageRequestRequest"
                            },
                            "examples": {
                                "SendDraft": {
                                    "value": {
                                        "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                        "senderId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                                        "textBody": "Hello, world!",
                                        "htmlBody": "<p>Hello, world!</p>"
                                    },
                                    "summary": "Send Draft"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SendMessageRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SendMessageResponse"
                                },
                                "examples": {
                                    "SendDraft": {
                                        "value": {
                                            "messageId": "123e4567-e89b-12d3-a456-426614174000",
                                            "senderId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                                            "textBody": "Hello, world!",
                                            "htmlBody": "<p>Hello, world!</p>"
                                        },
                                        "summary": "Send Draft"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/tasks/{task_id}/": {
            "get": {
                "operationId": "tasks_retrieve",
                "description": "\n    Get the status of an async task.\n\n    This endpoint returns the current status of a task identified by its ID.\n    ",
                "parameters": [
                    {
                        "in": "path",
                        "name": "task_id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "tasks"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskStatusResponse"
                                },
                                "examples": {
                                    "TaskStatus": {
                                        "value": {
                                            "status": "SUCCESS",
                                            "result": {
                                                "success": true
                                            },
                                            "error": null
                                        },
                                        "summary": "Task Status"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/threads/": {
            "get": {
                "operationId": "threads_list",
                "description": "List threads with optional search functionality.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "has_active",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads that have active messages (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_attachments",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with attachments (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_draft",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with draft messages (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_messages",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads that have messages (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_sender",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with messages sent by the user (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_starred",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with starred messages (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_trashed",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads that are trashed (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "is_spam",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads that are spam (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "label_slug",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter threads by label slug."
                    },
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter threads by mailbox ID."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search threads by content (subject, sender, recipients, message body)."
                    }
                ],
                "tags": [
                    "threads"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedThreadList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/threads/{id}/": {
            "get": {
                "operationId": "threads_retrieve",
                "description": "ViewSet for Thread model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "threads"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Thread"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "threads_destroy",
                "description": "ViewSet for Thread model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "threads"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/threads/{id}/refresh-summary/": {
            "post": {
                "operationId": "threads_refresh_summary_create",
                "description": "Refresh the summary of a thread.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "threads"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "summary": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Summary successfully refreshed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "Permission denied"
                                }
                            }
                        },
                        "description": "User does not have permission to refresh the summary of this thread."
                    }
                }
            }
        },
        "/api/v1.0/threads/{id}/summary/": {
            "get": {
                "operationId": "threads_summary_retrieve",
                "description": "Retrieve the summary of a thread.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "threads"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "summary": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Thread summary retrieved successfully."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "detail": "Permission denied"
                                }
                            }
                        },
                        "description": "User does not have permission to access this thread."
                    }
                }
            }
        },
        "/api/v1.0/threads/{thread_id}/accesses/": {
            "get": {
                "operationId": "threads_accesses_list",
                "description": "ViewSet for ThreadAccess model.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter thread accesses by mailbox ID."
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "thread_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "thread-access"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedThreadAccessList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "threads_accesses_create",
                "description": "Create a new thread access.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter thread accesses by mailbox ID."
                    },
                    {
                        "in": "path",
                        "name": "thread_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "thread-access"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ThreadAccessRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ThreadAccessRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadAccess"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/threads/{thread_id}/accesses/{id}/": {
            "put": {
                "operationId": "threads_accesses_update",
                "description": "ViewSet for ThreadAccess model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter thread accesses by mailbox ID."
                    },
                    {
                        "in": "path",
                        "name": "thread_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "thread-access"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ThreadAccessRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ThreadAccessRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadAccess"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "threads_accesses_partial_update",
                "description": "ViewSet for ThreadAccess model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter thread accesses by mailbox ID."
                    },
                    {
                        "in": "path",
                        "name": "thread_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "thread-access"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedThreadAccessRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedThreadAccessRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadAccess"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "threads_accesses_destroy",
                "description": "ViewSet for ThreadAccess model.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "primary key for the record as UUID"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter thread accesses by mailbox ID."
                    },
                    {
                        "in": "path",
                        "name": "thread_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "thread-access"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1.0/threads/stats/": {
            "get": {
                "operationId": "threads_stats_retrieve",
                "description": "Get aggregated statistics for threads based on filters.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "has_attachments",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with attachments (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_draft",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with draft messages (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_sender",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with messages sent by the user (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_starred",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads with starred messages (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "has_trashed",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter threads that are trashed (1=true, 0=false)."
                    },
                    {
                        "in": "query",
                        "name": "label_slug",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter threads by label slug."
                    },
                    {
                        "in": "query",
                        "name": "mailbox_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter threads by mailbox ID."
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search threads by content (subject, sender, recipients, message body)."
                    },
                    {
                        "in": "query",
                        "name": "stats_fields",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "all_unread"
                            ]
                        },
                        "description": "Comma-separated list of fields to aggregate.\n                Special values: 'all' (count all threads), 'all_unread' (count all unread threads).\n                Boolean fields: has_trashed, has_draft, has_starred, has_attachments, has_sender, has_active, is_spam, has_messages.\n                Unread variants ('_unread' suffix): count threads where the condition is true AND the thread is unread.\n                Examples: 'all,all_unread', 'has_starred,has_starred_unread', 'is_spam,is_spam_unread'",
                        "required": true,
                        "explode": false,
                        "style": "form"
                    }
                ],
                "tags": [
                    "threads"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "integer"
                                    }
                                }
                            }
                        },
                        "description": "A dictionary containing the aggregated counts. Keys correspond to the fields requested via the `stats_fields` query parameter. Each value is an integer count. Keys not requested will not be present in the response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "detail": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Returned if `stats_fields` parameter is missing or contains invalid fields."
                    }
                }
            }
        },
        "/api/v1.0/users/": {
            "get": {
                "operationId": "users_list",
                "description": "List users.\nSearch users by email, full name or maildomain.\nA search query of at least 3 characters is required.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "maildomain_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter users by maildomain."
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search users by full name, short name or email."
                    }
                ],
                "tags": [
                    "admin-users-list"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserWithoutAbilities"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1.0/users/me/": {
            "get": {
                "operationId": "users_me_retrieve",
                "description": "Return information on currently logged user",
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserWithAbilities"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Attachment": {
                "type": "object",
                "description": "Serialize attachments.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "blobId": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "title": "File name",
                        "description": "Original filename of the attachment"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Return the size of the associated blob.",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    },
                    "sha256": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    }
                },
                "required": [
                    "blobId",
                    "created_at",
                    "id",
                    "name",
                    "sha256",
                    "size",
                    "type"
                ]
            },
            "ChangeFlagRequestRequest": {
                "type": "object",
                "properties": {
                    "flag": {
                        "$ref": "#/components/schemas/FlagEnum"
                    },
                    "value": {
                        "type": "boolean"
                    },
                    "message_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "List of message UUIDs to apply the flag change to."
                    },
                    "thread_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "List of thread UUIDs where all messages should have the flag change applied."
                    }
                },
                "required": [
                    "flag",
                    "value"
                ]
            },
            "Contact": {
                "type": "object",
                "description": "Serialize contacts.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    }
                },
                "required": [
                    "email",
                    "id"
                ]
            },
            "DNSCheckResponse": {
                "type": "object",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DNSRecordCheck"
                        }
                    }
                },
                "required": [
                    "domain",
                    "records"
                ]
            },
            "DNSCheckResult": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "found": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "DNSRecordCheck": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "_check": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DNSCheckResult"
                            }
                        ],
                        "title": " check"
                    }
                },
                "required": [
                    "_check",
                    "target",
                    "type",
                    "value"
                ]
            },
            "DraftMessageRequestRequest": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Message ID if updating an existing draft"
                    },
                    "parentId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Message ID if replying to an existing message"
                    },
                    "senderId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Mailbox ID to use as sender"
                    },
                    "subject": {
                        "type": "string",
                        "nullable": true,
                        "description": "Subject of the message (optional; empty or null allowed)"
                    },
                    "draftBody": {
                        "type": "string",
                        "description": "Content of the draft message as arbitrary text (usually JSON)"
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email",
                            "minLength": 1
                        },
                        "description": "List of recipient email addresses"
                    },
                    "cc": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email",
                            "minLength": 1
                        },
                        "description": "List of CC recipient email addresses"
                    },
                    "bcc": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email",
                            "minLength": 1
                        },
                        "description": "List of BCC recipient email addresses"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {}
                        },
                        "description": "List of attachment objects with blobId, partId, and name"
                    },
                    "signatureId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the signature template to use"
                    }
                },
                "required": [
                    "senderId"
                ]
            },
            "FlagEnum": {
                "enum": [
                    "unread",
                    "starred",
                    "trashed"
                ],
                "type": "string",
                "description": "* `unread` - unread\n* `starred` - starred\n* `trashed` - trashed"
            },
            "ImportFileRequest": {
                "type": "object",
                "description": "Serializer for importing email files.",
                "properties": {
                    "blob": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID of the blob"
                    },
                    "recipient": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID of the recipient mailbox"
                    }
                },
                "required": [
                    "blob",
                    "recipient"
                ]
            },
            "ImportIMAPRequest": {
                "type": "object",
                "description": "Serializer for importing messages from IMAP server via API.",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID of the recipient mailbox"
                    },
                    "imap_server": {
                        "type": "string",
                        "minLength": 1,
                        "description": "IMAP server hostname"
                    },
                    "imap_port": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "IMAP server port"
                    },
                    "username": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "description": "Email address for IMAP login"
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1,
                        "description": "IMAP password"
                    },
                    "use_ssl": {
                        "type": "boolean",
                        "default": true,
                        "description": "Use SSL for IMAP connection"
                    }
                },
                "required": [
                    "imap_port",
                    "imap_server",
                    "password",
                    "recipient",
                    "username"
                ]
            },
            "Label": {
                "type": "object",
                "description": "Serializer for Label model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the label/folder (can use slashes for hierarchy, e.g. 'Work/Projects')",
                        "maxLength": 255
                    },
                    "slug": {
                        "type": "string",
                        "readOnly": true,
                        "description": "URL-friendly version of the name",
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the label in hex format (e.g. #FF0000)",
                        "maxLength": 7
                    },
                    "mailbox": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Mailbox that owns this label"
                    },
                    "threads": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Threads that have this label"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the label, used by AI to understand its purpose",
                        "maxLength": 255
                    },
                    "is_auto": {
                        "type": "boolean",
                        "title": "Auto labeling",
                        "description": "Whether this label should be automatically applied by AI"
                    }
                },
                "required": [
                    "id",
                    "mailbox",
                    "name",
                    "slug"
                ]
            },
            "LabelRequest": {
                "type": "object",
                "description": "Serializer for Label model.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the label/folder (can use slashes for hierarchy, e.g. 'Work/Projects')",
                        "maxLength": 255
                    },
                    "color": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Color of the label in hex format (e.g. #FF0000)",
                        "maxLength": 7
                    },
                    "mailbox": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Mailbox that owns this label"
                    },
                    "threads": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Threads that have this label"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the label, used by AI to understand its purpose",
                        "maxLength": 255
                    },
                    "is_auto": {
                        "type": "boolean",
                        "title": "Auto labeling",
                        "description": "Whether this label should be automatically applied by AI"
                    }
                },
                "required": [
                    "mailbox",
                    "name"
                ]
            },
            "MailDomainAccessRoleChoices": {
                "type": "string",
                "enum": [
                    "admin"
                ]
            },
            "MailDomainAdmin": {
                "type": "object",
                "description": "Serialize mail domains for admin view.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    },
                    "expected_dns_records": {
                        "type": "string",
                        "readOnly": true
                    },
                    "abilities": {
                        "type": "object",
                        "description": "Instance permissions and capabilities",
                        "properties": {
                            "get": {
                                "type": "boolean",
                                "description": "Can read"
                            },
                            "post": {
                                "type": "boolean",
                                "description": "Can create"
                            },
                            "put": {
                                "type": "boolean",
                                "description": "Can update"
                            },
                            "patch": {
                                "type": "boolean",
                                "description": "Can partially update"
                            },
                            "delete": {
                                "type": "boolean",
                                "description": "Can delete"
                            },
                            "manage_accesses": {
                                "type": "boolean",
                                "description": "Can manage accesses"
                            },
                            "manage_mailboxes": {
                                "type": "boolean",
                                "description": "Can manage mailboxes"
                            }
                        },
                        "required": [
                            "get",
                            "post",
                            "put",
                            "patch",
                            "delete",
                            "manage_accesses",
                            "manage_mailboxes"
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "abilities",
                    "created_at",
                    "expected_dns_records",
                    "id",
                    "name",
                    "updated_at"
                ]
            },
            "MailDomainAdminWrite": {
                "type": "object",
                "description": "Serialize mail domains for creating / editing admin view.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "pattern": "^[a-z0-9][a-z0-9.-]*[a-z0-9]$",
                        "maxLength": 253
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    },
                    "oidc_autojoin": {
                        "type": "boolean",
                        "description": "Create mailboxes automatically based on OIDC emails."
                    },
                    "identity_sync": {
                        "type": "boolean",
                        "description": "Sync mailboxes to an identity provider."
                    },
                    "custom_attributes": {
                        "description": "Metadata to sync to the maildomain group in the identity provider."
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "updated_at"
                ]
            },
            "MailDomainAdminWriteRequest": {
                "type": "object",
                "description": "Serialize mail domains for creating / editing admin view.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "pattern": "^[a-z0-9][a-z0-9.-]*[a-z0-9]$",
                        "maxLength": 253
                    },
                    "oidc_autojoin": {
                        "type": "boolean",
                        "description": "Create mailboxes automatically based on OIDC emails."
                    },
                    "identity_sync": {
                        "type": "boolean",
                        "description": "Sync mailboxes to an identity provider."
                    },
                    "custom_attributes": {
                        "description": "Metadata to sync to the maildomain group in the identity provider."
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Mailbox": {
                "type": "object",
                "description": "Serialize mailboxes.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "email": {
                        "type": "string",
                        "readOnly": true
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MailboxRoleChoices"
                            }
                        ],
                        "readOnly": true
                    },
                    "count_unread_messages": {
                        "type": "string",
                        "readOnly": true
                    },
                    "count_messages": {
                        "type": "string",
                        "readOnly": true
                    },
                    "abilities": {
                        "type": "object",
                        "description": "Instance permissions and capabilities",
                        "properties": {
                            "get": {
                                "type": "boolean",
                                "description": "Can read"
                            },
                            "post": {
                                "type": "boolean",
                                "description": "Can create"
                            },
                            "put": {
                                "type": "boolean",
                                "description": "Can update"
                            },
                            "patch": {
                                "type": "boolean",
                                "description": "Can partially update"
                            },
                            "delete": {
                                "type": "boolean",
                                "description": "Can delete"
                            },
                            "manage_accesses": {
                                "type": "boolean",
                                "description": "Can manage accesses"
                            },
                            "view_messages": {
                                "type": "boolean",
                                "description": "Can view mailbox messages"
                            },
                            "send_messages": {
                                "type": "boolean",
                                "description": "Can send messages from mailbox"
                            },
                            "manage_labels": {
                                "type": "boolean",
                                "description": "Can manage mailbox labels"
                            }
                        },
                        "required": [
                            "get",
                            "post",
                            "put",
                            "patch",
                            "delete",
                            "manage_accesses",
                            "view_messages",
                            "send_messages",
                            "manage_labels"
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "abilities",
                    "count_messages",
                    "count_unread_messages",
                    "email",
                    "id",
                    "role"
                ]
            },
            "MailboxAccessNestedUser": {
                "type": "object",
                "description": "Serialize MailboxAccess for nesting within MailboxAdminSerializer.\nShows user details and their role on the mailbox.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserWithoutAbilities"
                            }
                        ],
                        "readOnly": true
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MailboxRoleChoices"
                            }
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "role",
                    "user"
                ]
            },
            "MailboxAccessRead": {
                "type": "object",
                "description": "Serialize mailbox access information for read operations with nested user details.\nMailbox context is implied by the URL, so mailbox details are not included here.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "user_details": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserWithoutAbilities"
                            }
                        ],
                        "readOnly": true
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MailboxRoleChoices"
                            }
                        ],
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "role",
                    "updated_at",
                    "user_details"
                ]
            },
            "MailboxAccessWrite": {
                "type": "object",
                "description": "Serializer for creating and updating mailbox access records.\nMailbox is set from the view based on URL parameters.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID (UUID) or email address"
                    },
                    "role": {
                        "$ref": "#/components/schemas/MailboxRoleChoices"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "role",
                    "updated_at",
                    "user"
                ]
            },
            "MailboxAccessWriteRequest": {
                "type": "object",
                "description": "Serializer for creating and updating mailbox access records.\nMailbox is set from the view based on URL parameters.",
                "properties": {
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID (UUID) or email address"
                    },
                    "role": {
                        "$ref": "#/components/schemas/MailboxRoleChoices"
                    }
                },
                "required": [
                    "role",
                    "user"
                ]
            },
            "MailboxAdmin": {
                "type": "object",
                "description": "Serialize Mailbox details for admin view, including users with access.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "local_part": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_.-]+$",
                        "maxLength": 64
                    },
                    "domain_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "is_identity": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether this mailbox identifies a person (i.e. is not an alias or a group)"
                    },
                    "alias_of": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID",
                        "nullable": true
                    },
                    "accesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MailboxAccessNestedUser"
                        },
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    },
                    "can_reset_password": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "contact": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Contact"
                            }
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "accesses",
                    "can_reset_password",
                    "contact",
                    "created_at",
                    "domain_name",
                    "id",
                    "is_identity",
                    "local_part",
                    "updated_at"
                ]
            },
            "MailboxAdminCreate": {
                "type": "object",
                "description": "Serialize Mailbox details for create admin endpoint, including users with access and\nmetadata.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "local_part": {
                        "type": "string",
                        "readOnly": true
                    },
                    "domain_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "is_identity": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether this mailbox identifies a person (i.e. is not an alias or a group)"
                    },
                    "alias_of": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID",
                        "nullable": true
                    },
                    "accesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MailboxAccessNestedUser"
                        },
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    },
                    "can_reset_password": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "contact": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Contact"
                            }
                        ],
                        "readOnly": true
                    },
                    "one_time_password": {
                        "type": "string",
                        "nullable": true,
                        "description": "Fake method just to make the OpenAPI schema valid.",
                        "readOnly": true
                    }
                },
                "required": [
                    "accesses",
                    "can_reset_password",
                    "contact",
                    "created_at",
                    "domain_name",
                    "id",
                    "is_identity",
                    "local_part",
                    "one_time_password",
                    "updated_at"
                ]
            },
            "MailboxAdminCreateMetadataRequest": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TypeEnum"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "custom_attributes": {}
                },
                "required": [
                    "type"
                ]
            },
            "MailboxAdminCreatePayloadRequest": {
                "type": "object",
                "properties": {
                    "local_part": {
                        "type": "string",
                        "minLength": 1
                    },
                    "alias_of": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MailboxAdminCreateMetadataRequest"
                    }
                },
                "required": [
                    "local_part",
                    "metadata"
                ]
            },
            "MailboxAdminUpdateMetadataRequest": {
                "type": "object",
                "properties": {
                    "full_name": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "custom_attributes": {}
                }
            },
            "MailboxLight": {
                "type": "object",
                "description": "Serializer for mailbox details in thread access.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "email": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "email",
                    "id",
                    "name"
                ]
            },
            "MailboxRoleChoices": {
                "type": "string",
                "enum": [
                    "viewer",
                    "editor",
                    "sender",
                    "admin"
                ]
            },
            "MaildomainAccessRead": {
                "type": "object",
                "description": "Serialize maildomain access information for read operations with nested user details.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserWithoutAbilities"
                            }
                        ],
                        "readOnly": true
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MailDomainAccessRoleChoices"
                            }
                        ],
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "role",
                    "updated_at",
                    "user"
                ]
            },
            "MaildomainAccessWrite": {
                "type": "object",
                "description": "Serializer for creating and updating maildomain access records.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID (UUID) or email address"
                    },
                    "role": {
                        "$ref": "#/components/schemas/MailDomainAccessRoleChoices"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "role",
                    "updated_at",
                    "user"
                ]
            },
            "MaildomainAccessWriteRequest": {
                "type": "object",
                "description": "Serializer for creating and updating maildomain access records.",
                "properties": {
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID (UUID) or email address"
                    },
                    "role": {
                        "$ref": "#/components/schemas/MailDomainAccessRoleChoices"
                    }
                },
                "required": [
                    "role",
                    "user"
                ]
            },
            "Message": {
                "type": "object",
                "description": "Serialize messages, getting parsed details from the Message model.\nAligns field names with JMAP where appropriate (textBody, htmlBody, to, cc, bcc).",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "parent_id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "nullable": true
                    },
                    "thread_id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "nullable": true
                    },
                    "subject": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    },
                    "htmlBody": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {}
                        },
                        "readOnly": true
                    },
                    "textBody": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {}
                        },
                        "readOnly": true
                    },
                    "draftBody": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        },
                        "readOnly": true
                    },
                    "sender": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Contact"
                            }
                        ],
                        "readOnly": true
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contact"
                        },
                        "readOnly": true
                    },
                    "cc": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contact"
                        },
                        "readOnly": true
                    },
                    "bcc": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contact"
                        },
                        "readOnly": true
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "sent_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "is_sender": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "is_draft": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "is_unread": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "is_starred": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "is_trashed": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_attachments": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "signature": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ReadOnlyMessageTemplate"
                            }
                        ],
                        "readOnly": true,
                        "nullable": true
                    },
                    "stmsg_headers": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Return the STMSG headers of the message.",
                        "readOnly": true
                    }
                },
                "required": [
                    "attachments",
                    "bcc",
                    "cc",
                    "created_at",
                    "draftBody",
                    "has_attachments",
                    "htmlBody",
                    "id",
                    "is_draft",
                    "is_sender",
                    "is_starred",
                    "is_trashed",
                    "is_unread",
                    "parent_id",
                    "read_at",
                    "sender",
                    "sent_at",
                    "signature",
                    "stmsg_headers",
                    "subject",
                    "textBody",
                    "thread_id",
                    "to",
                    "updated_at"
                ]
            },
            "MessageTemplate": {
                "type": "object",
                "description": "Serialize message templates for POST/PUT/PATCH operations.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the template (e.g., 'Standard Reply', 'Out of Office', 'Work Signature')",
                        "maxLength": 255
                    },
                    "html_body": {
                        "type": "string"
                    },
                    "text_body": {
                        "type": "string"
                    },
                    "raw_body": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MessageTemplateTypeChoices"
                    },
                    "is_active": {
                        "type": "boolean",
                        "description": "Whether this template is available for use"
                    },
                    "is_forced": {
                        "type": "boolean",
                        "default": false,
                        "description": "Set as forced template"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "type",
                    "updated_at"
                ]
            },
            "MessageTemplateRequest": {
                "type": "object",
                "description": "Serialize message templates for POST/PUT/PATCH operations.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the template (e.g., 'Standard Reply', 'Out of Office', 'Work Signature')",
                        "maxLength": 255
                    },
                    "html_body": {
                        "type": "string",
                        "minLength": 1
                    },
                    "text_body": {
                        "type": "string",
                        "minLength": 1
                    },
                    "raw_body": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "$ref": "#/components/schemas/MessageTemplateTypeChoices"
                    },
                    "is_active": {
                        "type": "boolean",
                        "description": "Whether this template is available for use"
                    },
                    "is_forced": {
                        "type": "boolean",
                        "default": false,
                        "description": "Set as forced template"
                    }
                },
                "required": [
                    "name",
                    "type"
                ]
            },
            "MessageTemplateTypeChoices": {
                "type": "string",
                "enum": [
                    "reply",
                    "new_message",
                    "signature"
                ]
            },
            "PaginatedMailDomainAdminList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MailDomainAdmin"
                        }
                    }
                }
            },
            "PaginatedMailboxAccessReadList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MailboxAccessRead"
                        }
                    }
                }
            },
            "PaginatedMailboxAdminList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MailboxAdmin"
                        }
                    }
                }
            },
            "PaginatedMessageList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    }
                }
            },
            "PaginatedThreadAccessList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ThreadAccess"
                        }
                    }
                }
            },
            "PaginatedThreadList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Thread"
                        }
                    }
                }
            },
            "PatchedLabelRequest": {
                "type": "object",
                "description": "Serializer for Label model.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the label/folder (can use slashes for hierarchy, e.g. 'Work/Projects')",
                        "maxLength": 255
                    },
                    "color": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Color of the label in hex format (e.g. #FF0000)",
                        "maxLength": 7
                    },
                    "mailbox": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Mailbox that owns this label"
                    },
                    "threads": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Threads that have this label"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the label, used by AI to understand its purpose",
                        "maxLength": 255
                    },
                    "is_auto": {
                        "type": "boolean",
                        "title": "Auto labeling",
                        "description": "Whether this label should be automatically applied by AI"
                    }
                }
            },
            "PatchedMailboxAccessWriteRequest": {
                "type": "object",
                "description": "Serializer for creating and updating mailbox access records.\nMailbox is set from the view based on URL parameters.",
                "properties": {
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID (UUID) or email address"
                    },
                    "role": {
                        "$ref": "#/components/schemas/MailboxRoleChoices"
                    }
                }
            },
            "PatchedMailboxAdminPartialUpdatePayloadRequest": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/MailboxAdminUpdateMetadataRequest"
                    }
                }
            },
            "PatchedMessageTemplateRequest": {
                "type": "object",
                "description": "Serialize message templates for POST/PUT/PATCH operations.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the template (e.g., 'Standard Reply', 'Out of Office', 'Work Signature')",
                        "maxLength": 255
                    },
                    "html_body": {
                        "type": "string",
                        "minLength": 1
                    },
                    "text_body": {
                        "type": "string",
                        "minLength": 1
                    },
                    "raw_body": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "$ref": "#/components/schemas/MessageTemplateTypeChoices"
                    },
                    "is_active": {
                        "type": "boolean",
                        "description": "Whether this template is available for use"
                    },
                    "is_forced": {
                        "type": "boolean",
                        "default": false,
                        "description": "Set as forced template"
                    }
                }
            },
            "PatchedThreadAccessRequest": {
                "type": "object",
                "description": "Serialize thread access information.",
                "properties": {
                    "thread": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID"
                    },
                    "mailbox": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ThreadAccessRoleChoices"
                    }
                }
            },
            "ReadOnlyMessageTemplate": {
                "type": "object",
                "description": "Serialize message templates for read-only operations.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Name of the template (e.g., 'Standard Reply', 'Out of Office', 'Work Signature')"
                    },
                    "html_body": {
                        "type": "string",
                        "description": "Get HTML body from blob.",
                        "readOnly": true
                    },
                    "text_body": {
                        "type": "string",
                        "description": "Get text body from content blob.",
                        "readOnly": true
                    },
                    "raw_body": {
                        "type": "string",
                        "nullable": true,
                        "description": "Get raw blob from content blob.",
                        "readOnly": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/MessageTemplateTypeChoices"
                    },
                    "is_active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether this template is available for use"
                    },
                    "is_forced": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether this template is forced; no other template of the same type can be used in the same scope"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "html_body",
                    "id",
                    "is_active",
                    "is_forced",
                    "name",
                    "raw_body",
                    "text_body",
                    "type",
                    "updated_at"
                ]
            },
            "ResetPasswordError": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "error"
                ]
            },
            "ResetPasswordInternalServerError": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "error"
                ]
            },
            "ResetPasswordNotFound": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "error"
                ]
            },
            "ResetPasswordResponse": {
                "type": "object",
                "properties": {
                    "one_time_password": {
                        "type": "string"
                    }
                },
                "required": [
                    "one_time_password"
                ]
            },
            "SendMessageRequestRequest": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the draft message to send"
                    },
                    "senderId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Mailbox ID from which to send (must match draft)"
                    },
                    "textBody": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Text body of the message"
                    },
                    "htmlBody": {
                        "type": "string",
                        "minLength": 1,
                        "description": "HTML body of the message"
                    }
                },
                "required": [
                    "messageId",
                    "senderId"
                ]
            },
            "SendMessageResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "$ref": "#/components/schemas/Message"
                    },
                    "task_id": {
                        "type": "string",
                        "description": "Task ID for tracking"
                    }
                },
                "required": [
                    "message",
                    "task_id"
                ]
            },
            "StatusEnum": {
                "enum": [
                    "FAILURE",
                    "PENDING",
                    "RECEIVED",
                    "RETRY",
                    "REVOKED",
                    "STARTED",
                    "SUCCESS"
                ],
                "type": "string",
                "description": "* `FAILURE` - FAILURE\n* `PENDING` - PENDING\n* `RECEIVED` - RECEIVED\n* `RETRY` - RETRY\n* `REVOKED` - REVOKED\n* `STARTED` - STARTED\n* `SUCCESS` - SUCCESS"
            },
            "TaskStatusResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "result": {
                        "nullable": true
                    },
                    "error": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "error",
                    "result",
                    "status"
                ]
            },
            "Thread": {
                "type": "object",
                "description": "Serialize threads.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "subject": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "snippet": {
                        "type": "string",
                        "readOnly": true
                    },
                    "messages": {
                        "type": "string",
                        "readOnly": true
                    },
                    "has_unread": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_trashed": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_draft": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_starred": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_attachments": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_sender": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_messages": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "is_spam": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "has_active": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "messaged_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "sender_names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    },
                    "user_role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ThreadAccessRoleChoices"
                            }
                        ],
                        "readOnly": true
                    },
                    "accesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ThreadAccessDetail"
                        },
                        "readOnly": true
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ThreadLabel"
                        },
                        "readOnly": true
                    },
                    "summary": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "accesses",
                    "has_active",
                    "has_attachments",
                    "has_draft",
                    "has_messages",
                    "has_sender",
                    "has_starred",
                    "has_trashed",
                    "has_unread",
                    "id",
                    "is_spam",
                    "labels",
                    "messaged_at",
                    "messages",
                    "sender_names",
                    "snippet",
                    "subject",
                    "summary",
                    "updated_at",
                    "user_role"
                ]
            },
            "ThreadAccess": {
                "type": "object",
                "description": "Serialize thread access information.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "thread": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID"
                    },
                    "mailbox": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ThreadAccessRoleChoices"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Created on",
                        "description": "date and time at which a record was created"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Updated on",
                        "description": "date and time at which a record was last updated"
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "mailbox",
                    "role",
                    "thread",
                    "updated_at"
                ]
            },
            "ThreadAccessDetail": {
                "type": "object",
                "description": "Serializer for thread access details.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "mailbox": {
                        "$ref": "#/components/schemas/MailboxLight"
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ThreadAccessRoleChoices"
                            }
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "mailbox",
                    "role"
                ]
            },
            "ThreadAccessRequest": {
                "type": "object",
                "description": "Serialize thread access information.",
                "properties": {
                    "thread": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID"
                    },
                    "mailbox": {
                        "type": "string",
                        "format": "uuid",
                        "description": "primary key for the record as UUID"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ThreadAccessRoleChoices"
                    }
                },
                "required": [
                    "mailbox",
                    "role",
                    "thread"
                ]
            },
            "ThreadAccessRoleChoices": {
                "type": "string",
                "enum": [
                    "viewer",
                    "editor"
                ]
            },
            "ThreadLabel": {
                "type": "object",
                "description": "Serializer to get labels details for a thread.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the label/folder (can use slashes for hierarchy, e.g. 'Work/Projects')",
                        "maxLength": 255
                    },
                    "slug": {
                        "type": "string",
                        "readOnly": true,
                        "description": "URL-friendly version of the name",
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the label in hex format (e.g. #FF0000)",
                        "maxLength": 7
                    },
                    "display_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the label, used by AI to understand its purpose",
                        "maxLength": 255
                    },
                    "is_auto": {
                        "type": "boolean",
                        "title": "Auto labeling",
                        "description": "Whether this label should be automatically applied by AI"
                    }
                },
                "required": [
                    "display_name",
                    "id",
                    "name",
                    "slug"
                ]
            },
            "TreeLabel": {
                "type": "object",
                "description": "Serializer for tree label response structure (OpenAPI purpose only...).",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "slug": {
                        "type": "string",
                        "readOnly": true
                    },
                    "color": {
                        "type": "string",
                        "readOnly": true
                    },
                    "display_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TreeLabel"
                        },
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true
                    },
                    "is_auto": {
                        "type": "boolean",
                        "readOnly": true
                    }
                },
                "required": [
                    "children",
                    "color",
                    "description",
                    "display_name",
                    "id",
                    "is_auto",
                    "name",
                    "slug"
                ]
            },
            "TypeEnum": {
                "enum": [
                    "personal",
                    "shared",
                    "redirect"
                ],
                "type": "string",
                "description": "* `personal` - personal\n* `shared` - shared\n* `redirect` - redirect"
            },
            "UserWithAbilities": {
                "type": "object",
                "description": "Serialize users with abilities.\nAllow to have separated OpenAPI definition for users with and without abilities.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "nullable": true,
                        "title": "Identity email address"
                    },
                    "full_name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "custom_attributes": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get custom attributes for the instance.",
                        "readOnly": true
                    },
                    "abilities": {
                        "type": "object",
                        "description": "Instance permissions and capabilities",
                        "properties": {
                            "view_maildomains": {
                                "type": "boolean",
                                "description": "Can view domain admin"
                            },
                            "create_maildomains": {
                                "type": "boolean",
                                "description": "Can create maildomains"
                            },
                            "manage_maildomain_accesses": {
                                "type": "boolean",
                                "description": "Can manage maildomain accesses"
                            }
                        },
                        "required": [
                            "view_maildomains",
                            "create_maildomains",
                            "manage_maildomain_accesses"
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "abilities",
                    "custom_attributes",
                    "email",
                    "full_name",
                    "id"
                ]
            },
            "UserWithoutAbilities": {
                "type": "object",
                "description": "Serialize users without abilities.\nAllow to have separated OpenAPI definition for users with and without abilities.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "description": "primary key for the record as UUID"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "nullable": true,
                        "title": "Identity email address"
                    },
                    "full_name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "custom_attributes": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get custom attributes for the instance.",
                        "readOnly": true
                    }
                },
                "required": [
                    "custom_attributes",
                    "email",
                    "full_name",
                    "id"
                ]
            }
        },
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sessionid"
            }
        }
    }
}